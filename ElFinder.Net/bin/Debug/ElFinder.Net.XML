<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ElFinder.Net</name>
    </assembly>
    <members>
        <member name="P:ElFinder.DTO.DirectoryDTO.ParentHash">
            <summary>
             Hash of parent directory. Required except roots dirs.
            </summary>
        </member>
        <member name="P:ElFinder.DTO.DirectoryDTO.ContainsChildDirs">
            <summary>
            Is directory contains subfolders
            </summary>
        </member>
        <member name="P:ElFinder.DTO.DTOBase.Name">
            <summary>
             Name of file/dir. Required
            </summary>
        </member>
        <member name="P:ElFinder.DTO.DTOBase.Hash">
            <summary>
             Hash of current file/dir path, first symbol must be letter, symbols before _underline_ - volume id, Required.
            </summary>
        </member>
        <member name="P:ElFinder.DTO.DTOBase.Mime">
            <summary>
             mime type. Required.
            </summary>
        </member>
        <member name="P:ElFinder.DTO.DTOBase.UnixTimeStamp">
            <summary>
            file modification time in unix timestamp. Required.
            </summary>
        </member>
        <member name="P:ElFinder.DTO.DTOBase.Size">
            <summary>
             file size in bytes
            </summary>
        </member>
        <member name="P:ElFinder.DTO.DTOBase.Read">
            <summary>
             is readable
            </summary>
        </member>
        <member name="P:ElFinder.DTO.DTOBase.Write">
            <summary>
            is writable
            </summary>
        </member>
        <member name="P:ElFinder.DTO.DTOBase.Locked">
            <summary>
             is file locked. If locked that object cannot be deleted and renamed
            </summary>
        </member>
        <member name="P:ElFinder.DTO.FileDTO.ParentHash">
            <summary>
             Hash of parent directory. Required except roots dirs.
            </summary>
        </member>
        <member name="T:ElFinder.Connector">
            <summary>
            Represents a connector which process elFinder request
            </summary>
        </member>
        <member name="M:ElFinder.Connector.#ctor(ElFinder.IDriver)">
            <summary>
            Initialize new instance of ElFinder.Connector
            </summary>
            <param name="driver">Driver to process request</param>
        </member>
        <member name="M:ElFinder.Connector.Process(System.Web.HttpRequestBase)">
            <summary>
            Process elFinder request
            </summary>
            <param name="request">Request from elFinder</param>
            <returns>Json response, which must be sent to elfinder</returns>
        </member>
        <member name="M:ElFinder.Connector.GetFileByHash(System.String)">
            <summary>
            Get actual filesystem path by hash
            </summary>
            <param name="hash">Hash of file or directory</param>
        </member>
        <member name="T:ElFinder.FileSystemDriver">
            <summary>
            Represents a driver for local file system
            </summary>
        </member>
        <member name="M:ElFinder.FileSystemDriver.#ctor">
            <summary>
            Initialize new instance of class ElFinder.FileSystemDriver 
            </summary>
        </member>
        <member name="M:ElFinder.FileSystemDriver.AddRoot(ElFinder.Root)">
            <summary>
            Adds an object to the end of the roots.
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:ElFinder.FileSystemDriver.Roots">
            <summary>
            Gets collection of roots
            </summary>
        </member>
        <member name="T:ElFinder.Root">
            <summary>
            Represents a root of file system
            </summary>
        </member>
        <member name="M:ElFinder.Root.#ctor(System.IO.DirectoryInfo,System.String)">
            <summary>
            Initialize new instanse of class <see cref="T:ElFinder.Root"/>
            </summary>
            <param name="directory">Directory which will be root</param>
            <param name="url">Url to root</param>
        </member>
        <member name="M:ElFinder.Root.#ctor(System.IO.DirectoryInfo)">
            <summary>
            Initialize new instanse of class <see cref="T:ElFinder.Root"/>
            </summary>
            <param name="directory">Directory which will be root</param>
        </member>
        <member name="P:ElFinder.Root.VolumeId">
            <summary>
            Gets a autogenerated prefix of root
            </summary>
        </member>
        <member name="P:ElFinder.Root.Alias">
            <summary>
            Get or sets alias for root. If not set will use directory name of path
            </summary>
        </member>
        <member name="P:ElFinder.Root.Directory">
            <summary>
            Get or sets a directory which is root 
            </summary>
        </member>
        <member name="P:ElFinder.Root.Url">
            <summary>
            Get or sets url that points to path directory (also called 'root URL'). 
            </summary>
        </member>
        <member name="P:ElFinder.Root.IsReadOnly">
            <summary>
            Get or sets if root for read only (users can't change file)
            </summary>
        </member>
        <member name="P:ElFinder.Root.IsShowOnly">
            <summary>
            Get or sets if user can only show files (and cannot download).
            Note: if you set url property, than users can access to directory by the provided url
            </summary>
        </member>
        <member name="P:ElFinder.Root.IsLocked">
            <summary>
            Get or sets if root is locked (user can't remove, rename or delete files or subdirectories)  
            </summary>
        </member>
        <member name="P:ElFinder.Root.StartPath">
            <summary>
            Get or sets a subfolder of root diretory, which will be start 
            </summary>
        </member>
        <member name="P:ElFinder.Root.MaxUploadSize">
            <summary>
            Get or sets maximum upload file size. This size is per files in bytes. 
            Note: you still to configure maxupload limits in web.config for whole application
            </summary>
        </member>
        <member name="P:ElFinder.Root.MaxUploadSizeInKb">
            <summary>
            Get or sets maximum upload file size. This size is per files in kb. 
            Note: you still to configure maxupload limits in web.config for whole application
            </summary>
        </member>
        <member name="P:ElFinder.Root.MaxUploadSizeInMb">
            <summary>
            Get or sets maximum upload file size. This size is per files in Mb. 
            Note: you still to configure maxupload limits in web.config for whole application
            </summary>
        </member>
        <member name="P:ElFinder.Root.UploadOverwrite">
            <summary>
            Get or sets if files on upload will replace or give them new names. true - replace old files, false give new names like original_name-number.ext
            </summary>
        </member>
        <member name="P:ElFinder.Root.ThumbnailsSize">
            <summary>
            Get or sets thumbnails size
            </summary>
        </member>
        <member name="P:ElFinder.Root.ThumbnailsUrl">
            <summary>
            Get ot sets thumbnals url
            </summary>
        </member>
        <member name="P:ElFinder.Root.ThumbnailsStorage">
            <summary>
            Get or sets directory for store all thumbnails.
            </summary>
        </member>
        <member name="P:ElFinder.Root.PicturesEditor">
            <summary>
            Get or sets pictures editor. The object responsible for generating thumnails and .
            </summary>
        </member>
        <member name="T:ElFinder.IPicturesEditor">
            <summary>
            Represents pictures editor
            </summary>
        </member>
        <member name="P:ElFinder.IPicturesEditor.BackgroundColor">
            <summary>
            Get or sets background color, which going be used in rotating operations
            </summary>
        </member>
        <member name="M:ElFinder.IPicturesEditor.CanProcessFile(System.String)">
            <summary>
            If pictures editor can process file
            </summary>
            <param name="fileExtension">The extension of file</param>
            <returns><c>True</c> if can process. otherwise <c>false</c></returns>
        </member>
        <member name="M:ElFinder.IPicturesEditor.GenerateThumbnail(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Generate thumbnail of image
            </summary>
            <param name="input">Input stream of image</param>
            <param name="size">Size in pixels of output thumbnail. Thumbnail is square.</param>
            <param name="saveAspectRatio"><c>True</c> if aspect ratio of output thumbnail
            must be equal aspect ration of input image.</param>
            <returns>Generated thumbnail</returns>
        </member>
        <member name="M:ElFinder.IPicturesEditor.ConvertThumbnailExtension(System.String)">
            <summary>
            Convert extension of file to browser's compatible images (png, jpg or gif)
            </summary>
            <param name="originalImageExtension">Extension of original file</param>
            <returns>Browser's compatible extension</returns>
        </member>
        <member name="M:ElFinder.IPicturesEditor.Resize(System.String,System.Int32,System.Int32)">
            <summary>
            Resize and overwrite image
            </summary>
            <param name="file">The full path to input image file</param>
            <param name="width">The width of output image</param>
            <param name="height">The height of output image</param>
        </member>
        <member name="M:ElFinder.IPicturesEditor.Crop(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Crop and overwrite image
            </summary>
            <param name="file">The full path to input image file</param>
            <param name="x">The x-coordinate of the upper-left corner of the cropping rectangle</param>
            <param name="y">The y-coordinate of the upper-left corner of the cropping rectangle</param>
            <param name="width">The width of cropping rectangle</param>
            <param name="height">The height of cropping rectangle</param>
        </member>
        <member name="M:ElFinder.IPicturesEditor.Rotate(System.String,System.Int32)">
            <summary>
            Rotate and overwrite image
            </summary>
            <param name="file">The full path to input image file</param>
            <param name="degree">Angle of rotation in degrees</param>
        </member>
        <member name="T:ElFinder.DefaultPicturesEditor">
            <summary>
            Represents default pictures editor
            </summary>
        </member>
        <member name="M:ElFinder.DefaultPicturesEditor.Rotate(System.Drawing.Image,System.Single)">
            <summary>
            Creates a new Image containing the same image only rotated
            </summary>
            <param name="image">The <see cref="T:System.Drawing.Image"/> to rotate</param>
            <param name="angle">The amount to rotate the image, clockwise, in degrees</param>
            <returns>A new <see cref="T:System.Drawing.Bitmap"/> that is just large enough
            to contain the rotated image without cutting any corners off.</returns>
            <remarks>Original code can be found at http://www.codeproject.com/Articles/58815/C-Image-PictureBox-Rotations </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if <see cref="!:image"/> is null.</exception>
        </member>
    </members>
</doc>
